// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2GyyV1uN4xbnqKtJ7pjrQU
// Component: zgR9JvU5my
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_e_commerce.module.css"; // plasmic-import: 2GyyV1uN4xbnqKtJ7pjrQU/projectcss
import sty from "./PlasmicRecuperaPsw.module.css"; // plasmic-import: zgR9JvU5my/css
import IconDirectionsChevronLeftIcon from "./icons/PlasmicIcon__IconDirectionsChevronLeft"; // plasmic-import: r8iYFvfxMc/icon

export const PlasmicRecuperaPsw__VariantProps = new Array();

export const PlasmicRecuperaPsw__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicRecuperaPsw__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textbox2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"group33459"}
            data-plasmic-override={overrides.group33459}
            className={classNames(projectcss.all, sty.group33459)}
          >
            <div
              data-plasmic-name={"card"}
              data-plasmic-override={overrides.card}
              className={classNames(projectcss.all, sty.card)}
            >
              <div
                data-plasmic-name={"rectangle8"}
                data-plasmic-override={overrides.rectangle8}
                className={classNames(projectcss.all, sty.rectangle8)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Hai dimenticato la password?"}
                </h1>
                <input
                  data-plasmic-name={"textbox2"}
                  data-plasmic-override={overrides.textbox2}
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.textbox2
                  )}
                  onChange={e => {
                    p.generateStateOnChangeProp($state, ["textbox2", "value"])(
                      e.target.value
                    );
                  }}
                  placeholder={
                    "Inserisci la mail con la quale ti sei registrato"
                  }
                  ref={ref => {
                    $refs["textbox2"] = ref;
                  }}
                  size={1}
                  type={"text"}
                  value={p.generateStateValueProp($state, [
                    "textbox2",
                    "value"
                  ])}
                />

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__cJuPo
                  )}
                  href={`/Home`}
                >
                  {(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return "Some link text";
                      }
                      throw e;
                    }
                  })()}
                </a>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__sxpu7
                  )}
                  href={`/login`}
                >
                  {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
                    <IconDirectionsChevronLeftIcon
                      data-plasmic-name={"indietro"}
                      data-plasmic-override={overrides.indietro}
                      className={classNames(projectcss.all, sty.indietro)}
                      key={currentIndex}
                      role={"img"}
                    />
                  ))}
                </a>
              </div>
            </div>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {
                "Inserisci la mail e\n riceverai nella tua casella di posta la\nmail di recupero password "
              }
            </div>
            <div
              data-plasmic-name={"signIn"}
              data-plasmic-override={overrides.signIn}
              className={classNames(projectcss.all, sty.signIn)}
            >
              <a
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.label
                )}
                href={`/login`}
              >
                {"CONTINUA"}
              </a>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "group33459",
    "card",
    "rectangle8",
    "h1",
    "textbox2",
    "indietro",
    "text",
    "signIn",
    "label"
  ],

  group33459: [
    "group33459",
    "card",
    "rectangle8",
    "h1",
    "textbox2",
    "indietro",
    "text",
    "signIn",
    "label"
  ],

  card: ["card", "rectangle8", "h1", "textbox2", "indietro"],
  rectangle8: ["rectangle8", "h1", "textbox2", "indietro"],
  h1: ["h1"],
  textbox2: ["textbox2"],
  indietro: ["indietro"],
  text: ["text"],
  signIn: ["signIn", "label"],
  label: ["label"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRecuperaPsw__ArgProps,
          internalVariantPropNames: PlasmicRecuperaPsw__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRecuperaPsw__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRecuperaPsw";
  } else {
    func.displayName = `PlasmicRecuperaPsw.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"2GyyV1uN4xbnqKtJ7pjrQU"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

export const PlasmicRecuperaPsw = Object.assign(
  // Top-level PlasmicRecuperaPsw renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    group33459: makeNodeComponent("group33459"),
    card: makeNodeComponent("card"),
    rectangle8: makeNodeComponent("rectangle8"),
    h1: makeNodeComponent("h1"),
    textbox2: makeNodeComponent("textbox2"),
    indietro: makeNodeComponent("indietro"),
    text: makeNodeComponent("text"),
    signIn: makeNodeComponent("signIn"),
    label: makeNodeComponent("label"),
    // Metadata about props expected for PlasmicRecuperaPsw
    internalVariantProps: PlasmicRecuperaPsw__VariantProps,
    internalArgProps: PlasmicRecuperaPsw__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRecuperaPsw;
/* prettier-ignore-end */
