// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2GyyV1uN4xbnqKtJ7pjrQU
// Component: zgR9JvU5my
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_e_commerce.module.css"; // plasmic-import: 2GyyV1uN4xbnqKtJ7pjrQU/projectcss
import sty from "./PlasmicRecuperaPsw.module.css"; // plasmic-import: zgR9JvU5my/css
import IconActionMainCalendar2Icon from "./icons/PlasmicIcon__IconActionMainCalendar2"; // plasmic-import: QQ0kYpyof/icon
import IconDirectionsChevronDownIcon from "./icons/PlasmicIcon__IconDirectionsChevronDown"; // plasmic-import: moRdiSEyvJ/icon
import IconDirectionsChevronLeftIcon from "./icons/PlasmicIcon__IconDirectionsChevronLeft"; // plasmic-import: r8iYFvfxMc/icon

export const PlasmicRecuperaPsw__VariantProps = new Array();

export const PlasmicRecuperaPsw__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicRecuperaPsw__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"group33459"}
            data-plasmic-override={overrides.group33459}
            className={classNames(projectcss.all, sty.group33459)}
          >
            <div
              data-plasmic-name={"card"}
              data-plasmic-override={overrides.card}
              className={classNames(projectcss.all, sty.card)}
            >
              <div
                data-plasmic-name={"rectangle8"}
                data-plasmic-override={overrides.rectangle8}
                className={classNames(projectcss.all, sty.rectangle8)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Hai dimenticato la password?"}
                </h1>
                <div
                  data-plasmic-name={"base"}
                  data-plasmic-override={overrides.base}
                  className={classNames(projectcss.all, sty.base)}
                >
                  <div
                    data-plasmic-name={"atomLabel"}
                    data-plasmic-override={overrides.atomLabel}
                    className={classNames(projectcss.all, sty.atomLabel)}
                  >
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wliGb
                        )}
                      >
                        {"Hint/optional"}
                      </div>
                    ) : null}
                  </div>
                  {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
                    <div
                      data-plasmic-name={"inputField"}
                      data-plasmic-override={overrides.inputField}
                      className={classNames(projectcss.all, sty.inputField)}
                      key={currentIndex}
                    >
                      {false ? (
                        <IconActionMainCalendar2Icon
                          className={classNames(projectcss.all, sty.svg__xN4Rz)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"atomInput"}
                        data-plasmic-override={overrides.atomInput}
                        className={classNames(projectcss.all, sty.atomInput)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tz29
                          )}
                        >
                          {"Inserisci la mail con la quale ti sei registrato"}
                        </div>
                      </div>
                      {false ? (
                        <IconDirectionsChevronDownIcon
                          className={classNames(projectcss.all, sty.svg__i8Uz3)}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                  ))}
                </div>
              </div>
            </div>
            <IconDirectionsChevronLeftIcon
              className={classNames(projectcss.all, sty.svg__wsgP)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__x3Ojw
              )}
            >
              {
                "Inserisci la mail e\n riceverai nella tua casella di posta la\nmail di recupero password "
              }
            </div>
            <div
              data-plasmic-name={"signIn"}
              data-plasmic-override={overrides.signIn}
              className={classNames(projectcss.all, sty.signIn)}
            >
              <a
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.label
                )}
                href={`/login`}
              >
                {"CONTINUA"}
              </a>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "group33459",
    "card",
    "rectangle8",
    "h1",
    "base",
    "atomLabel",
    "inputField",
    "atomInput",
    "signIn",
    "label"
  ],

  group33459: [
    "group33459",
    "card",
    "rectangle8",
    "h1",
    "base",
    "atomLabel",
    "inputField",
    "atomInput",
    "signIn",
    "label"
  ],

  card: [
    "card",
    "rectangle8",
    "h1",
    "base",
    "atomLabel",
    "inputField",
    "atomInput"
  ],

  rectangle8: [
    "rectangle8",
    "h1",
    "base",
    "atomLabel",
    "inputField",
    "atomInput"
  ],

  h1: ["h1"],
  base: ["base", "atomLabel", "inputField", "atomInput"],
  atomLabel: ["atomLabel"],
  inputField: ["inputField", "atomInput"],
  atomInput: ["atomInput"],
  signIn: ["signIn", "label"],
  label: ["label"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRecuperaPsw__ArgProps,
          internalVariantPropNames: PlasmicRecuperaPsw__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRecuperaPsw__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRecuperaPsw";
  } else {
    func.displayName = `PlasmicRecuperaPsw.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"2GyyV1uN4xbnqKtJ7pjrQU"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

export const PlasmicRecuperaPsw = Object.assign(
  // Top-level PlasmicRecuperaPsw renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    group33459: makeNodeComponent("group33459"),
    card: makeNodeComponent("card"),
    rectangle8: makeNodeComponent("rectangle8"),
    h1: makeNodeComponent("h1"),
    base: makeNodeComponent("base"),
    atomLabel: makeNodeComponent("atomLabel"),
    inputField: makeNodeComponent("inputField"),
    atomInput: makeNodeComponent("atomInput"),
    signIn: makeNodeComponent("signIn"),
    label: makeNodeComponent("label"),
    // Metadata about props expected for PlasmicRecuperaPsw
    internalVariantProps: PlasmicRecuperaPsw__VariantProps,
    internalArgProps: PlasmicRecuperaPsw__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRecuperaPsw;
/* prettier-ignore-end */
