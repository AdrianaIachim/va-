// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2GyyV1uN4xbnqKtJ7pjrQU
// Component: PYR3doOuIF
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: _fVUBuH_zTPtNr/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_e_commerce.module.css"; // plasmic-import: 2GyyV1uN4xbnqKtJ7pjrQU/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: PYR3doOuIF/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 5ELsae-rPxEAZc/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: dKQnY774Exf/icon

export const PlasmicLogin__VariantProps = new Array();

export const PlasmicLogin__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicLogin__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textbox.textboxValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textbox.textboxValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textbox.textboxValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "password.passwordValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"2GyyV1uN4xbnqKtJ7pjrQU"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <React.Fragment>
        <div className={projectcss.plasmic_page_wrapper}>
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_library_plasmic_color_type_css.plasmic_tokens,
              sty.root
            )}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wOi8Q)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q3OFh
                )}
              >
                {"FORMAGGI, PIANTE E BIBITE PER TUTT*!"}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wAbZ7)}
              >
                <input
                  data-plasmic-name={"textbox"}
                  data-plasmic-override={overrides.textbox}
                  autoComplete={"username"}
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.textbox
                  )}
                  onChange={async (...eventArgs) => {
                    (e => {
                      p.generateStateOnChangeProp($state, [
                        "textbox",
                        "textboxValue"
                      ])(e.target.value);
                    }).apply(null, eventArgs);
                    (async event => {
                      const $steps = {};
                      $steps["setTextboxTextboxValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "5vi3buGMj",
                                  componentUuid: "PYR3doOuIF",
                                  argName: "variable"
                                },
                                () => ({
                                  objRoot: $state,
                                  variablePath: ["textbox", "textboxValue"]
                                })
                              ),

                              operation: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "5vi3buGMj",
                                  componentUuid: "PYR3doOuIF",
                                  argName: "operation"
                                },
                                () => 0
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariable",
                                interactionUuid: "5vi3buGMj",
                                componentUuid: "PYR3doOuIF"
                              },
                              () =>
                                (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  const { objRoot, variablePath } = variable;
                                  p.set(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["setTextboxTextboxValue"] === "object" &&
                        typeof $steps["setTextboxTextboxValue"].then ===
                          "function"
                      ) {
                        $steps["setTextboxTextboxValue"] =
                          await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "5vi3buGMj",
                              componentUuid: "PYR3doOuIF"
                            },
                            $steps["setTextboxTextboxValue"]
                          );
                      }
                    })?.apply(null, eventArgs);
                  }}
                  placeholder={"Username"}
                  ref={ref => {
                    $refs["textbox"] = ref;
                  }}
                  size={1}
                  type={"text"}
                  value={p.generateStateValueProp($state, [
                    "textbox",
                    "textboxValue"
                  ])}
                />

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__onzEj)}
                  >
                    <input
                      data-plasmic-name={"password"}
                      data-plasmic-override={overrides.password}
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.password
                      )}
                      onChange={e => {
                        p.generateStateOnChangeProp($state, [
                          "password",
                          "passwordValue"
                        ])(e.target.value);
                      }}
                      placeholder={"Password"}
                      ref={ref => {
                        $refs["password"] = ref;
                      }}
                      size={1}
                      type={"password"}
                      value={p.generateStateValueProp($state, [
                        "password",
                        "passwordValue"
                      ])}
                    />
                  </div>
                ) : null}
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__xXcHg
                  )}
                >
                  {"Hai dimenticato la password?"}
                </a>
              </p.Stack>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__mmE7J)}
                    role={"img"}
                  />
                }
                link={`/HO`}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__jpXk4)}
                    role={"img"}
                  />
                }
              >
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__bWnjf
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {""}
                </a>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bRn1U
                  )}
                >
                  {""}
                </div>
              </Button>
            </p.Stack>
          </div>
        </div>
      </React.Fragment>
    </p.PlasmicPageGuard>
  );
}

const PlasmicDescendants = {
  root: ["root", "textbox", "password", "button"],
  textbox: ["textbox"],
  password: ["password"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textbox: makeNodeComponent("textbox"),
    password: makeNodeComponent("password"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
