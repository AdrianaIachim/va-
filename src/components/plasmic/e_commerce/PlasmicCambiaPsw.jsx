// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2GyyV1uN4xbnqKtJ7pjrQU
// Component: 572xutjypC
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_e_commerce.module.css"; // plasmic-import: 2GyyV1uN4xbnqKtJ7pjrQU/projectcss
import sty from "./PlasmicCambiaPsw.module.css"; // plasmic-import: 572xutjypC/css
import IconDirectionsChevronLeftIcon from "./icons/PlasmicIcon__IconDirectionsChevronLeft"; // plasmic-import: r8iYFvfxMc/icon

export const PlasmicCambiaPsw__VariantProps = new Array();

export const PlasmicCambiaPsw__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicCambiaPsw__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "password.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "password2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <a
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"group33459"}
            data-plasmic-override={overrides.group33459}
            className={classNames(projectcss.all, sty.group33459)}
          >
            <div
              data-plasmic-name={"card"}
              data-plasmic-override={overrides.card}
              className={classNames(projectcss.all, sty.card)}
            >
              <IconDirectionsChevronLeftIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {"La password deve includere almeno 8 caratteri"}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000" }}
                  >
                    {"e includere 1 numero e 1 carattere speciale!"}
                  </span>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"signIn"}
                data-plasmic-override={overrides.signIn}
                className={classNames(projectcss.all, sty.signIn)}
              >
                <a
                  data-plasmic-name={"label"}
                  data-plasmic-override={overrides.label}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.label
                  )}
                  href={`/login`}
                >
                  {"CONTINUA"}
                </a>
              </div>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Cambia Password"}
              </h1>
              <input
                data-plasmic-name={"password"}
                data-plasmic-override={overrides.password}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.password
                )}
                onChange={e => {
                  p.generateStateOnChangeProp($state, ["password", "value"])(
                    e.target.value
                  );
                }}
                placeholder={"Inserire Password Nuova"}
                ref={ref => {
                  $refs["password"] = ref;
                }}
                size={1}
                type={"password"}
                value={p.generateStateValueProp($state, ["password", "value"])}
              />

              <input
                data-plasmic-name={"password2"}
                data-plasmic-override={overrides.password2}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.password2
                )}
                onChange={e => {
                  p.generateStateOnChangeProp($state, ["password2", "value"])(
                    e.target.value
                  );
                }}
                placeholder={"Inserire Password Nuova"}
                ref={ref => {
                  $refs["password2"] = ref;
                }}
                size={1}
                type={"password"}
                value={p.generateStateValueProp($state, ["password2", "value"])}
              />
            </div>
          </div>
        </a>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "group33459",
    "card",
    "svg",
    "text",
    "signIn",
    "label",
    "h1",
    "password",
    "password2"
  ],

  group33459: [
    "group33459",
    "card",
    "svg",
    "text",
    "signIn",
    "label",
    "h1",
    "password",
    "password2"
  ],

  card: [
    "card",
    "svg",
    "text",
    "signIn",
    "label",
    "h1",
    "password",
    "password2"
  ],

  svg: ["svg"],
  text: ["text"],
  signIn: ["signIn", "label"],
  label: ["label"],
  h1: ["h1"],
  password: ["password"],
  password2: ["password2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCambiaPsw__ArgProps,
          internalVariantPropNames: PlasmicCambiaPsw__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCambiaPsw__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCambiaPsw";
  } else {
    func.displayName = `PlasmicCambiaPsw.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"2GyyV1uN4xbnqKtJ7pjrQU"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

export const PlasmicCambiaPsw = Object.assign(
  // Top-level PlasmicCambiaPsw renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    group33459: makeNodeComponent("group33459"),
    card: makeNodeComponent("card"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    signIn: makeNodeComponent("signIn"),
    label: makeNodeComponent("label"),
    h1: makeNodeComponent("h1"),
    password: makeNodeComponent("password"),
    password2: makeNodeComponent("password2"),
    // Metadata about props expected for PlasmicCambiaPsw
    internalVariantProps: PlasmicCambiaPsw__VariantProps,
    internalArgProps: PlasmicCambiaPsw__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCambiaPsw;
/* prettier-ignore-end */
