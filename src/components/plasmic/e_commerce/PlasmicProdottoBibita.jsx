// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2GyyV1uN4xbnqKtJ7pjrQU
// Component: AO9jTWCBi4k
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Header3 from "../../Header3"; // plasmic-import: iGqVXRH7Uc/component
import Footer from "../../Footer"; // plasmic-import: GewF2Qmnx2xftX/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_e_commerce.module.css"; // plasmic-import: 2GyyV1uN4xbnqKtJ7pjrQU/projectcss
import sty from "./PlasmicProdottoBibita.module.css"; // plasmic-import: AO9jTWCBi4k/css
import LeftArrowSvgrepoComsvgIcon from "./icons/PlasmicIcon__LeftArrowSvgrepoComsvg"; // plasmic-import: BLG2WTl0koydmQ/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Z9yWUb_XEPOXSj/icon
import header5JpgVk99NncPi5Mx8 from "./images/header5Jpg.jpg"; // plasmic-import: Vk99NNC-Pi5MX8/picture
import acquapngVm8DXQ6U from "./images/acquapng.png"; // plasmic-import: Vm8d_xQ6u/picture

export const PlasmicProdottoBibita__VariantProps = new Array();

export const PlasmicProdottoBibita__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProdottoBibita__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__v9RDn)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__xrmt)}>
                  {true ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__nWoc6)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"35%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: header5JpgVk99NncPi5Mx8,
                        fullWidth: 502,
                        fullHeight: 872,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                  {true ? (
                    <Header3
                      data-plasmic-name={"header3"}
                      data-plasmic-override={overrides.header3}
                      className={classNames("__wab_instance", sty.header3)}
                    />
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tarcB)}
                  >
                    {true ? (
                      <p.Stack
                        as={"a"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__riDu
                        )}
                        href={`/catalogo`}
                      >
                        <LeftArrowSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__mFeZo)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u5DV8
                          )}
                        >
                          {"HOME"}
                        </div>
                      </p.Stack>
                    ) : null}
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"foreground2"}
                      data-plasmic-override={overrides.foreground2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground2)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"columns"}
                        data-plasmic-override={overrides.columns}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.columns)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___1Aqo
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__isP8A)}
                            displayHeight={"673px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: acquapngVm8DXQ6U,
                              fullWidth: 381,
                              fullHeight: 1093,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.column__xLvPg
                          )}
                        >
                          <h3
                            data-plasmic-name={"h3"}
                            data-plasmic-override={overrides.h3}
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3
                            )}
                          >
                            {"Fico"}
                          </h3>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mtIdB
                            )}
                          >
                            {"PIANTE"}
                          </div>
                          <h5
                            data-plasmic-name={"h5"}
                            data-plasmic-override={overrides.h5}
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5
                            )}
                          >
                            {"$10.00"}
                          </h5>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__w37Yd
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lYlZl
                              )}
                            >
                              {"Ficus"}
                            </div>
                            {true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__z1QE
                                )}
                              >
                                {true ? (
                                  <p.Stack
                                    as={"a"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.link___7TWpZ
                                    )}
                                    href={`/Carrello`}
                                  >
                                    <Icon3Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___3WTrQ
                                      )}
                                      role={"img"}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gWfoq
                                      )}
                                    >
                                      {"Aggiungi al carrello"}
                                    </div>
                                  </p.Stack>
                                ) : null}
                              </div>
                            ) : null}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </div>
              ) : null}
            </div>
          ) : null}
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "header3", "foreground2", "columns", "h3", "h5", "footer"],
  header3: ["header3"],
  foreground2: ["foreground2", "columns", "h3", "h5"],
  columns: ["columns", "h3", "h5"],
  h3: ["h3"],
  h5: ["h5"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProdottoBibita__ArgProps,
          internalVariantPropNames: PlasmicProdottoBibita__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProdottoBibita__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProdottoBibita";
  } else {
    func.displayName = `PlasmicProdottoBibita.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"2GyyV1uN4xbnqKtJ7pjrQU"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

export const PlasmicProdottoBibita = Object.assign(
  // Top-level PlasmicProdottoBibita renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    header3: makeNodeComponent("header3"),
    foreground2: makeNodeComponent("foreground2"),
    columns: makeNodeComponent("columns"),
    h3: makeNodeComponent("h3"),
    h5: makeNodeComponent("h5"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicProdottoBibita
    internalVariantProps: PlasmicProdottoBibita__VariantProps,
    internalArgProps: PlasmicProdottoBibita__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProdottoBibita;
/* prettier-ignore-end */
