// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2GyyV1uN4xbnqKtJ7pjrQU
// Component: SkWOoe9ASwpis-
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header2 from "../../Header2"; // plasmic-import: ymsmsqowiD_hX8/component
import Footer from "../../Footer"; // plasmic-import: GewF2Qmnx2xftX/component
import { useScreenVariants as useScreenVariantscf27W7HxUbhqT } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -CF27w7hxUbhqT/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_e_commerce.module.css"; // plasmic-import: 2GyyV1uN4xbnqKtJ7pjrQU/projectcss
import sty from "./PlasmicGestioneOrdini.module.css"; // plasmic-import: SkWOoe9ASwpis-/css

export const PlasmicGestioneOrdini__VariantProps = new Array();

export const PlasmicGestioneOrdini__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicGestioneOrdini__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscf27W7HxUbhqT()
  });
  return (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"2GyyV1uN4xbnqKtJ7pjrQU"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <React.Fragment>
        <div className={projectcss.plasmic_page_wrapper}>
          {true ? (
            <div
              data-plasmic-name={"root"}
              data-plasmic-override={overrides.root}
              data-plasmic-root={true}
              data-plasmic-for-node={forNode}
              className={classNames(
                projectcss.all,
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_library_plasmic_color_type_css.plasmic_tokens,
                sty.root
              )}
            >
              {true ? (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <Header2
                      data-plasmic-name={"header2"}
                      data-plasmic-override={overrides.header2}
                      className={classNames("__wab_instance", sty.header2)}
                    />
                  ) : null}
                </div>
              ) : null}
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
                  <div
                    className={classNames(projectcss.all, sty.column__wuYx8)}
                    key={currentIndex}
                    title={``}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"rff"}
                    </div>
                  </div>
                ))}

                <div
                  className={classNames(projectcss.all, sty.column___6MSlI)}
                />

                <div
                  className={classNames(projectcss.all, sty.column__lyDw6)}
                />

                <div className={classNames(projectcss.all, sty.column__eah)} />
                <div
                  className={classNames(projectcss.all, sty.column__mdaZw)}
                />

                <div
                  className={classNames(projectcss.all, sty.column__iQhm2)}
                />

                <div className={classNames(projectcss.all, sty.column__wpTJ)} />
                <div
                  className={classNames(projectcss.all, sty.column__jMxTt)}
                />
              </div>
              {true ? (
                <Footer
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  className={classNames("__wab_instance", sty.footer)}
                />
              ) : null}
            </div>
          ) : null}
        </div>
      </React.Fragment>
    </p.PlasmicPageGuard>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "header2", "columns", "text", "footer"],
  freeBox: ["freeBox", "header2"],
  header2: ["header2"],
  columns: ["columns", "text"],
  text: ["text"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGestioneOrdini__ArgProps,
          internalVariantPropNames: PlasmicGestioneOrdini__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicGestioneOrdini__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGestioneOrdini";
  } else {
    func.displayName = `PlasmicGestioneOrdini.${nodeName}`;
  }
  return func;
}

export const PlasmicGestioneOrdini = Object.assign(
  // Top-level PlasmicGestioneOrdini renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    header2: makeNodeComponent("header2"),
    columns: makeNodeComponent("columns"),
    text: makeNodeComponent("text"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicGestioneOrdini
    internalVariantProps: PlasmicGestioneOrdini__VariantProps,
    internalArgProps: PlasmicGestioneOrdini__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGestioneOrdini;
/* prettier-ignore-end */
